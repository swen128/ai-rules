## Important

The user is more skilled at programming than Roo, but asks Roo to code to save time.

When tests fail more than twice in a row, we'll organize the current situation and work together to find a solution.

I have extensive knowledge learned from GitHub, and I can implement specific algorithms and library usage faster than the user. I'll write test code to verify functionality while explaining the code to the user.

On the other hand, I'm not good at context-dependent processing. When the context is unclear, I'll check with the user.

## Preparation for Starting Work

I'll check the current git context with `git status`.
If there are many changes unrelated to the requested task, I'll suggest that the user start as a separate task from the current changes.

If told to ignore this, I'll continue as is.


# Coding Practices

## Principles

### Functional Programming (FP)

- Prioritize pure functions
- Use immutable data structures
- Isolate side effects
- Ensure type safety

### Domain-Driven Design (DDD)

- Distinguish between value objects and entities
- Ensure consistency with aggregates
- Abstract data access with repositories
- Be mindful of bounded contexts

### Test-Driven Development (TDD)

- Red-Green-Refactor cycle
- Treat tests as specifications
- Iterate in small units
- Continuous refactoring

## Implementation Patterns

### Type Definitions

```typescript
// Ensure type safety with branded types
type Branded<T, B> = T & { _brand: B };
type Money = Branded<number, "Money">;
type Email = Branded<string, "Email">;
```

### Value Objects

- Immutable
- Identity based on value
- Self-validating
- Contains domain operations

```typescript
// Creation functions with validation
function createMoney(amount: number): Result<Money, Error> {
  if (amount < 0) return err(new Error("Negative amounts not allowed"));
  return ok(amount as Money);
}
```

### Entities

- Identity based on ID
- Controlled updates
- Consistency rules

### Result Type

```typescript
type Result<T, E> = { ok: true; value: T } | { ok: false; error: E };
```

- Explicitly indicate success/failure
- Use early return pattern
- Define error types

### Repositories

- Handle only domain models
- Hide persistence details
- Provide in-memory implementation for testing

### Adapter Pattern

- Abstract external dependencies
- Define interfaces on the caller side
- Easily replaceable for testing

## Implementation Procedure

1. **Type Design**
   - Define types first
   - Express domain language with types

2. **Implement Pure Functions First**
   - Start with functions that have no external dependencies
   - Write tests first

3. **Isolate Side Effects**
   - Push I/O operations to function boundaries
   - Wrap processes with side effects in Promises

4. **Implement Adapters**
   - Abstract access to external services and databases
   - Prepare mocks for testing

## Practices

- Start small and expand gradually
- Avoid excessive abstraction
- Prioritize types over code
- Adjust approach based on complexity

## Code Style

- Prefer functions (use classes only when necessary)
- Utilize immutable update patterns
- Flatten conditional branches with early returns
- Define error and use case enums

## Testing Strategy

- Prioritize unit tests for pure functions
- Test repositories with in-memory implementations
- Build testability into design
- Assert-first: work backward from expected results


## TypeScript

Here's a summary of general best practices for coding in TypeScript.

### Approach

- First consider types and function interfaces that process them
- Document file specifications as clearly as possible in code comments
- When implementations don't have internal state, prefer functions over class implementations
- To abstract side effects, use the adapter pattern for external dependencies and use in-memory adapters for testing

### Type Usage Guidelines

1. Use specific types
   - Avoid using any
   - Use unknown and then narrow down the type
   - Utilize Utility Types

2. Type alias naming
   - Use meaningful names
   - Clearly indicate the intent of the type
   ```ts
   // Good
   type UserId = string;
   type UserData = {
     id: UserId;
     createdAt: Date;
   };

   // Bad
   type Data = any;
   ```

### Error Handling

1. Using Result type
   ```ts
   import { err, ok, Result } from "neverthrow";

   type ApiError =
     | { type: "network"; message: string }
     | { type: "notFound"; message: string }
     | { type: "unauthorized"; message: string };

   async function fetchUser(id: string): Promise<Result<User, ApiError>> {
     try {
       const response = await fetch(`/api/users/${id}`);
       if (!response.ok) {
         switch (response.status) {
           case 404:
             return err({ type: "notFound", message: "User not found" });
           case 401:
             return err({ type: "unauthorized", message: "Unauthorized" });
           default:
             return err({
               type: "network",
               message: `HTTP error: ${response.status}`,
             });
         }
       }
       return ok(await response.json());
     } catch (error) {
       return err({
         type: "network",
         message: error instanceof Error ? error.message : "Unknown error",
       });
     }
   }
   ```

2. Error type definition
   - Enumerate specific cases
   - Include error messages
   - Utilize type exhaustiveness checking

### Implementation Patterns

1. Function-based (when stateless)
   ```ts
   // Interface
   interface Logger {
     log(message: string): void;
   }

   // Implementation
   function createLogger(): Logger {
     return {
       log(message: string): void {
         console.log(`[${new Date().toISOString()}] ${message}`);
       },
     };
   }
   ```

2. Class-based (when stateful)
   ```ts
   interface Cache<T> {
     get(key: string): T | undefined;
     set(key: string, value: T): void;
   }

   class TimeBasedCache<T> implements Cache<T> {
     private items = new Map<string, { value: T; expireAt: number }>();

     constructor(private ttlMs: number) {}

     get(key: string): T | undefined {
       const item = this.items.get(key);
       if (!item || Date.now() > item.expireAt) {
         return undefined;
       }
       return item.value;
     }

     set(key: string, value: T): void {
       this.items.set(key, {
         value,
         expireAt: Date.now() + this.ttlMs,
       });
     }
   }
   ```

3. Adapter pattern (abstracting external dependencies)
   ```ts
   // Abstraction
   type Fetcher = <T>(path: string) => Promise<Result<T, ApiError>>;

   // Implementation
   function createFetcher(headers: Record<string, string>): Fetcher {
     return async <T>(path: string) => {
       try {
         const response = await fetch(path, { headers });
         if (!response.ok) {
           return err({
             type: "network",
             message: `HTTP error: ${response.status}`,
           });
         }
         return ok(await response.json());
       } catch (error) {
         return err({
           type: "network",
           message: error instanceof Error ? error.message : "Unknown error",
         });
       }
     };
   }

   // Usage
   class ApiClient {
     constructor(
       private readonly getData: Fetcher,
       private readonly baseUrl: string,
     ) {}

     async getUser(id: string): Promise<Result<User, ApiError>> {
       return await this.getData(`${this.baseUrl}/users/${id}`);
     }
   }
   ```

### Implementation Selection Criteria

1. When to choose functions
   - Simple operations only
   - No internal state needed
   - Few dependencies
   - Easy to test

2. When to choose classes
   - Internal state management needed
   - Need to maintain configuration or resources
   - State shared between methods
   - Lifecycle management needed

3. When to choose Adapters
   - Abstracting external dependencies
   - Need for mocking during testing
   - Want to hide implementation details
   - Need to ensure replaceability

### General Rules

1. Dependency injection
   - Inject external dependencies via constructor
   - Make replaceable with mocks during testing
   - Avoid global state

2. Interface design
   - Define minimum necessary methods
   - Don't include implementation details
   - Avoid platform-specific types

3. Testability
   - Keep mock implementations concise
   - Include edge case tests
   - Properly separate test helpers

4. Code splitting
   - Follow the single responsibility principle
   - Modularize at appropriate granularity
   - Avoid circular references

This project has the following modes defined:
- library-searcher LibraryResearcher at .cline/roomodes/library-searcher.md
- bun-tdd Bun:TDD at .cline/roomodes/bun-tdd.md
- bun-module Bun:Module at .cline/roomodes/bun-module.md
- bun-script Bun:Script at .cline/roomodes/bun-script.md